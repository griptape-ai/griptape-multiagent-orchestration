events:
  go_to_first_state:
    transitions:
    - from: start
      to: greeting
  next_state:
    transitions:
    - from: greeting
      to: habitats
      relevance: All of the goals have been met.
    - from: habitats
      to: animals_in_habitats
      relevance: All of the goals have been met.
    - from: animals_in_habitats
      to: end
      relevance: The general_state_goal goals_fufilled is 'yes'.
  fix_habitats:
    transitions:
    - from: animals_in_habitats
      to: habitats
      relevance: The habitat_related_state_goal goals_fulfilled is 'yes'. The general_state_goal goals_fufilled is 'no'. This transition takes higher priority.
    
  
prompts:
  state_changer_instructions:
    author_intent: Allow for the state_changer to send to different states based on whether it's goals have been fufilled. The information is stored in a dictionary called {goals}. The possible states are stored in a dictionary called {state_transition_dict}.
    prompt: "Based on the dictionary {goals}, determine which state, keys in {state_transition_dict}, has had it's value fulfilled. \ 
     \ Create a list of the states that have had that value fulfilled. Out of that list, choose the state with the highest priority. \ 
     Return as a json with that state from {state_transition_dict} as the key, and the value for missing_requirements as the value. \
     \ No markdown, code snippets, code blocks, or backticks."
  goalie_add_presenter_conversation_to_conversation_memory:
    author_intent: Append the presenter's response so that the goalie has context to evaluate if its goals have been fulfilled. It is stored
      in a variable called {latest_agent_response}
    prompt: '"In the most recent exchange, the presenter said ''{latest_agent_response}''."'
  goalie_add_user_conversation_to_conversation_memory:
    author_intent: Append the user's response so that the goalie has
      context to evaluate if its goals have been fulfilled. It is stored in a variable
      called {latest_user_input}
    prompt: '"In the most recent exchange, the user said: ''{latest_user_input}''."'
  presenter_add_user_conversation_to_conversation_memory:
    author_intent: Append the user's response so that the presenter
      has context to sound intelligent. It is stored in a variable called {latest_user_input}
    prompt: '"In the most recent exchange, the user said: ''{latest_user_input}''."'
  prompter_add_user_conversation_to_conversation_memory:
    author_intent: Append the user's response so that the prompter has context
      for how to move forward. It is stored in a variable called {latest_user_input}
    prompt: '"In the most recent exchange, the user said: ''{latest_user_input}''."'
  prompter_goalie_unfulfilled_make_judgment_call:
    author_intent: Make a judgment call on what to do based on feedback from the goalie and by assessing the user's inputs. The goalie has its
      remaining requirements described in a variable called {missing_requirements}.
    prompt: '"Determine a prompt for the presenter that will direct the
      conversation towards what we need to fulfill our goals.  If the user is off track, the prompt should redirect them towards our goals. Answer as a json object with a key called ''steering_prompt'' that
      is a text string of the prompt to give the presenter. No markdown,
      code snippets, code blocks, or backticks. The presenter needs the
      following requirements addressed in order to be fulfilled: {missing_requirements}."'
  instructions_for_goalie:
    author_intent: These are instructions given to the goalie to assess whether
      its goals have been fulfilled. It will return a programmatic response, including
      any requirements it wants to ask the user about in order to be fulfilled.
    prompt: "Evaluate if your goals have been met. \
            \ Answer as a json object with two keys; `goals_fulfilled` and `missing_requirements`.\ 
            \ The `goals_fulfilled` key is a 'yes' or 'no' in exactly that format. \
            \ The `missing_requirements` key is a text description of which of your \
            \ requirements for your current goal have NOT yet been fulfilled. \ 
            \ No markdown, code snippets, code blocks, or backticks. Use conversation memory as well to determine this."
  instructions_to_presenter_to_steer_user:
    author_intent: The prompter will give us a prompt to steer us. This prompt
      passes what the goalie found missing to the presenter in a variable
      called {steering_prompt}.
    prompt: '"Use your skills as a presenter to steer the user. Here is the
      prompt: {steering_prompt}"'
rulesets:
  goals_greeting:
    name: Goals and requirements for greeting
    rules:
    - "Your goals are to ensure the user understands that we're assisting them in designing a zoo. We need them to give us critical information before we can begin that process. \
      \ - In order to fufill this goal, you have two requirements; first, ensure the user has given their name,\
      \ second, ensure the user has given the name of their zoo. Use coversation memory."
  goals_habitats:
    name: Goals and requirements for habitats
    rules:
    - "Your goals are to help the user design their zoo, and provide any additional information they might need. We need information from them to begin designing their zoo layout. \
      \ - In order to fufill this goal, you have two requirements; first, ensure the user has suggested two habitats , \
      \ second, the presenter suggested one different habitat in it's latest response."
  goals_animals_in_habitats:
    name: Goals and requirements for animals in habitats
    rules:
    - "Your goals are to help the user make their zoo more detailed by augmenting and fleshing out the current design. You need information from \
      \ the user to provide those details. Use conversation memory to determine the habitats. \
      \ - In order to fufill this goal, you have two requirements; first, ensure the user has given two different animals, \
      \ second, ensure the suggested animals live in the habitats."
  goals_failure_habitat:
    name: Goals and requirements for failure 
    rules:
    - "Your goals are to determine if the user is suggesting details that don't fit with the current design of their zoo. \
      \ - In order to fufill this goal, you have one requirement; the user names an animal doesn't belong in either of the two habitats in their most recent message."
  state_changer_description:
    name: Description of the state changer
    rules:
    - You are skilled at determining which state to move to. You excel at identifying which state the conversation is in, and which one it should move to to be the most productive.
  state_changer_skills:
    name: Skills for state changer
    rules:
    - You are skilled at taking in information about goals that haven't been met, and determining which state is the most likely to help meet the goals given.
  state_changer_animals_in_habitats:
    name: Special rule for animals in habitats state
    rules:
    - If habitat_related_state_goal goals_fulfilled is 'yes', always take that transition.
  prompter_description:
    name: Description of the prompter
    rules:
    - "You are responsible for guiding the conversation. If the user is saying irrelevant things, you must guide them back to the main focus. \
      \ The main focus is building a realistic zoo. If they are asking questions about the zoo, describe to them what a zoo is and an example of a habitat or animal. \
      A goalie will tell you what it needs to fufill those goals, and you will use that information to create your steering prompt."
  presenter_description:
    name: Description of the presenter
    rules:
    - "You are responsible for talking with the user. The prompter will give you a steering prompt. \ 
      \ Use the steering prompt and make it more conversational.  "

states:
  start:
    initial: true
  greeting:
    assistants:
      state_changer: {}
      presenter: {}
      prompter: {}
      general_state_goal:
        ruleset_ids:
        - goals_greeting
  habitats:
    assistants:
      state_changer: {}
      presenter: {}
      prompter: {}
      general_state_goal:
        ruleset_ids:
        - goals_habitats
  animals_in_habitats:
    assistants:
      state_changer:
        ruleset_ids:
        - state_changer_animals_in_habitats
      presenter: {}
      prompter: {}
      general_state_goal:
        ruleset_ids:
        - goals_animals_in_habitats
      habitat_related_state_goal:
        ruleset_ids:
        - goals_failure_habitat
  end:
    final: true
assistants:
  state_changer:
    model: gpt-4o
    ruleset_ids:
    - state_changer_description
    - state_changer_skills
  presenter:
    model: gpt-4o
    ruleset_ids:
    - presenter_description
  prompter:
    model: gpt-4o
    ruleset_ids:
    - prompter_description
  # assistants must have the name state_goal to be chosen for goal workflow.
  general_state_goal:
    model: gpt-4o
    ruleset_ids: []
  habitat_related_state_goal:
    model: gpt-4o
    ruleset_ids: []
  

  

